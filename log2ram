#!/usr/bin/env bash

. /etc/log2ram.conf

if [ -z "$PATH_DISK" ]; then
    PATH_DISK='/var/log'
fi

LOG_NAME='log2ram.log'
NO_RSYNC=${USE_RSYNC#true}
NOTIFICATION_COMMAND=${NOTIFICATION_COMMAND:=mail -s "Log2Ram Error on $HOSTNAME" root}
NOTIFICATION=${NOTIFICATION:=true}

## @fn is_safe()
## @brief Check if hdd log exists
is_safe() {
    [ -d "$HDD_LOG" ] || echo "ERROR: $HDD_LOG/ doesn't exist! Can't sync."
    [ -d "$HDD_LOG" ] || exit 1
}

## @fn sync_to_disk()
## @brief Sync memory back to hard disk
sync_to_disk() {
    is_safe

    # Clear logs (only copy structure)
    find $PATH_DISK -type f | while read -r file
    do
        cat /dev/null > $file
    done

    if [ -z "${NO_RSYNC}" ] && [ -x "$(command -v rsync)" ]; then
        rsync -aAXv --sparse --inplace --no-whole-file --delete-after \
                --exclude '*.gz' --exclude '*.xz' --exclude='*.[0-9]' \
                --exclude 'journal/*/*' "$RAM_LOG"/ "$HDD_LOG"/ 2>&1 | tee -a "$LOG2RAM_LOG"
    else
        cp -rfup --sparse=always "$RAM_LOG"/ -T "$HDD_LOG"/ 2>&1 | tee -a "$LOG2RAM_LOG"
    fi
}

## @fn sync_from_disk()
## @brief Sync hard disk to memory
sync_from_disk() {
    is_safe

    TP_SIZE=$SIZE

    if [ -n "$(du -sh -t "$TP_SIZE" "$HDD_LOG"/ | cut -f1)" ]; then
        echo "ERROR: RAM disk for \"$HDD_LOG/\" too small. Can't sync."
        echo -e "File(s) causing issues\n: $(du -sh -t "$TP_SIZE" "$HDD_LOG"/*)"
        umount -l "$RAM_LOG"/
        umount -l "$HDD_LOG"/
        if [ "$NOTIFICATION" = true ]; then
            echo "LOG2RAM : No place on RAM for \"$HDD_LOG/\" anymore, fallback on the disk" | $NOTIFICATION_COMMAND
        fi
        exit 1
    fi

    if [ -z "${NO_RSYNC}" ] && [ -x "$(command -v rsync)" ]; then
        rsync -aAXv --sparse --inplace --no-whole-file --delete-after "$HDD_LOG"/ "$RAM_LOG"/ 2>&1 | tee -a "$LOG2RAM_LOG"
    else
        cp -rfup --sparse=always "$HDD_LOG"/ -T "$RAM_LOG"/ 2>&1 | tee -a "$LOG2RAM_LOG"
    fi

}

## @fn wait_for()
## @brief Wait for directory and create test file to make sure the directory exists
## @param param1 path to the directory
wait_for() {
    WAIT_PATH="$1"
    while ! findmnt "$WAIT_PATH" >/dev/null; do
        sleep 0.1
    done

    while [ ! -f "$WAIT_PATH/log2ram.test" ]; do
        touch "$WAIT_PATH/log2ram.test"
        sleep 0.1
    done
    rm "$WAIT_PATH/log2ram.test"
}

case "$1" in
start)
    IFS=';'
    for i in $PATH_DISK; do
        # Skip the path if the folder doesn't exist
        [ ! -d "$i" ] && continue

        PATH_FIRST_PART="${i%/*}"
        PATH_LAST_PART="${i##/*/}"
        RAM_LOG="$i"
        HDD_LOG="${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}"
        LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME}"

        [ -d "$HDD_LOG" ] || mkdir "$HDD_LOG"

        mount --bind "$RAM_LOG"/ "$HDD_LOG"/
        mount --make-private "$HDD_LOG"/
        wait_for "$HDD_LOG"

        mount -t tmpfs -o "nosuid,noexec,noatime,nodev,mode=0755,size=${SIZE}" log2ram "$RAM_LOG"/
        wait_for "$RAM_LOG"
        sync_from_disk
    done
    exit 0
    ;;

stop)
    IFS=';'
    for i in $PATH_DISK; do
        PATH_FIRST_PART="${i%/*}"
        PATH_LAST_PART="${i##/*/}"
        RAM_LOG="$i"
        HDD_LOG="${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}"
        LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME}"

        sync_to_disk
        umount -l "$RAM_LOG"/
        umount -l "$HDD_LOG"/
    done
    exit 0
    ;;

write)
    IFS=';'
    for i in $PATH_DISK; do
        PATH_FIRST_PART="${i%/*}"
        PATH_LAST_PART="${i##/*/}"
        RAM_LOG="$i"
        HDD_LOG="${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}"
        LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME}"

        sync_to_disk
    done
    exit 0
    ;;

*)
    echo 'Usage: log2ram {start|stop|write}' >&2
    exit 1
    ;;
esac
